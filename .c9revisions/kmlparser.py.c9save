{"ts":1351778246309,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/usr/bin/env python\n# encoding: utf-8\n\"\"\"\n\nkmlparser.py\n\nCreated by John Wesonga on 2011-11-03.\n\n\"\"\"\n\nimport os\nimport csv\nimport getpass\nfrom optparse import OptionParser\n\nfrom BeautifulSoup import BeautifulSoup\nimport gdata.docs.service\nimport gdata.docs.data\n\n\nclass KmlParser(object):\n    \"\"\"\n        KmlParser\n    \"\"\" \n    def __init__(self, kmlfile, csvfile):\n        self.kmlfile = kmlfile\n        self.csvfile = csvfile\n        self.outputfile = ''\n        self.outputdata = []\n    \n    def ParseKml(self): \n        \"\"\"\n            parse_kml\n        \"\"\"\n        try:\n            handler = open(self.kmlfile).read()\n            soup = BeautifulSoup(handler)\n            for message in soup.findAll('placemark'):\n                locationdata = {}\n                coordinates = message.find('coordinates')\n                locationdata['geometry'] = '<LineString> %s </LineString>' % (coordinates)\n                names = message.findAll('name')\n                for name in names:\n                    text = name.find(text = True)\n                    locationdata['name'] = text\n            self.outputdata.append(locationdata)                    \n        except IOError as (errno, strerror):\n            print \"I/O error({0}): {1}\".format(errno, strerror)\n\n    def WriteCsv(self):\n        \"\"\"\n            write_csv        \n        \"\"\" \n        self.outputfile = os.getcwd() + '/' + self.csvfile\n        try:\n            out = open(self.outputfile,'w')\n            print 'Writing output to file ', self.outputfile\n            try:\n                fieldnames = sorted(self.outputdata[0].keys())\n                writer = csv.DictWriter(out, dialect = 'excel', \n                        fieldnames = fieldnames, \n                        extrasaction='ignore', quoting=csv.QUOTE_NONNUMERIC)\n                headers = dict((n, n) for n in fieldnames)\n                writer.writerow(headers)\n                for row in self.outputdata:\n                    writer.writerow(row)\n                print 'Output file ', self.outputfile, ' written' \n            finally:\n                out.close()\n        except IOError as (errno, strerror):\n            print \"I/O error({0}): {1}\".format(errno, strerror)\n        return self.outputfile\n\n\n    def Upload(self, output_file):\n        \"\"\"\n            upload      \n        \"\"\"\n        upload_prompt = raw_input('Would you like to upload your csv file to Google Docs? (y/n) ')\n        if upload_prompt == 'y':\n          email = raw_input('Please enter your gmail address: ')\n          password = getpass.getpass('Please enter your gmail password: ')\n          client = gdata.docs.service.DocsService()\n          client.ClientLogin(email, password, 'kmltocsv')\n          uploaded_filename = self.csvfile[0:-4]\n          mediasource = gdata.data.MediaSource(file_path = output_file,\n               content_type = gdata.docs.service.SUPPORTED_FILETYPES['TXT'])\n          entry = client.Upload(mediasource, uploaded_filename)\n          if entry:\n              print 'Upload successful '\n              print 'Document now accessible at:', entry.GetAlternateLink().href\n          else:\n              print 'Upload error'\n        else:\n\t       print 'Please access your CSV file at', self.outputfile\n\ndef main():\n    \"\"\"\n        Main method\n    \"\"\"\n    parser = OptionParser()\n    parser.add_option(\"-f\", \"--file\", dest = \"kmlfile\", \n                    help = \"KML file to be parsed\", \n                    metavar = \"FILE\")                     \n    parser.add_option(\"-d\", \"--output\", dest = \"csvfile\", \n                   help = \"CSV output file\", \n                   metavar = \"FILE\")\n    (options, args) = parser.parse_args()\n    if not options.kmlfile:\n        print \"please type python \" \\\n              \"kmlparser.py --file=[kmlfilename] --output=[csvfilename]\"     \n    elif not options.csvfile:\n        print \"please type python \" \\\n              \"kmlparser.py --file=[kmlfilename] --output=[csvfilename]\"\n    else:\n        kmlparser = KmlParser(kmlfile=options.kmlfile, \n                             csvfile=options.csvfile)               \n        kmlparser.ParseKml()\n        upload_file = kmlparser.WriteCsv()\n        kmlparser.Upload(upload_file)\nif __name__ == \"__main__\":\n    main()\n\n\n\n\n "]],"start1":0,"start2":0,"length1":0,"length2":4237}]],"length":4237}
{"contributors":[],"silentsave":false,"ts":1351778540627,"patch":[[{"diffs":[[0,"getpass\n"],[1,"import logging\n"],[0,"from opt"]],"start1":132,"start2":132,"length1":16,"length2":31},{"diffs":[[0,"r):\n            "],[-1,"print "],[1,"logging.error("],[0,"\"I/O error({0}):"]],"start1":1210,"start2":1210,"length1":38,"length2":46},{"diffs":[[0,"trerror)"],[1,")"],[0,"\n\n    de"]],"start1":1277,"start2":1277,"length1":16,"length2":17},{"diffs":[[0,"        "],[-1,"print "],[1,"logging.error("],[0,"\"I/O err"]],"start1":2166,"start2":2166,"length1":22,"length2":30},{"diffs":[[0,"trerror)"],[1,")"],[0,"\n       "]],"start1":2225,"start2":2225,"length1":16,"length2":17},{"diffs":[[0,"            "],[-1,"print '"],[1,"logging.info(\""],[0,"Upload succe"]],"start1":3018,"start2":3018,"length1":31,"length2":38},{"diffs":[[0,"ccessful"],[-1," '"],[1,"\")"],[0,"\n       "]],"start1":3053,"start2":3053,"length1":18,"length2":18},{"diffs":[[0,"        "],[-1,"print '"],[1,"logging.info(\""],[0,"Document"]],"start1":3070,"start2":3070,"length1":23,"length2":30},{"diffs":[[0,"ible at:"],[-1,"'"],[1,"\""],[0,", entry."]],"start1":3111,"start2":3111,"length1":17,"length2":17},{"diffs":[[0,"k().href"],[1,")"],[0,"\n       "]],"start1":3143,"start2":3143,"length1":16,"length2":17},{"diffs":[[0,"\t       "],[-1,"print '"],[1,"logging.info(\""],[0,"Please a"]],"start1":3218,"start2":3218,"length1":23,"length2":30},{"diffs":[[0," file at"],[-1,"',"],[1," %s\" %"],[0," self.ou"]],"start1":3262,"start2":3262,"length1":18,"length2":22},{"diffs":[[0,"tputfile"],[1,")"],[0,"\n\ndef ma"]],"start1":3284,"start2":3284,"length1":16,"length2":17}]],"length":4297,"saved":false}
{"ts":1351778726772,"patch":[[{"diffs":[[0,"O error("],[-1,"{0}): {1}\".format"],[1,"%d): %s\" %"],[0,"(errno, "]],"start1":1243,"start2":1243,"length1":33,"length2":26},{"diffs":[[0,"ror("],[-1,"{0}): {1}\".format"],[1,"%d): %s\" % "],[0,"(err"]],"start1":2188,"start2":2188,"length1":25,"length2":19}]],"length":4284,"saved":false}
